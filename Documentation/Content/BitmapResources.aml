<?xml version="1.0" encoding="utf-8"?>
<topic id="f8c0040f-899e-4a98-8e29-c2fbd36025bf" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        This section demonstrates how to use this library for manipulating bitmap resources.
      </para>
      <para>
        When <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.ResourceInfo</codeEntityReference>
        encouters a resource of type <literal>2</literal> (<literal>RT_BITMAP</literal>), it creates an object
        of type <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.BitmapResource</codeEntityReference>
        which contains a <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.DeviceIndependentBitmap</codeEntityReference>.
      </para>
    </introduction>
    <section address="bitmaps_readingbitmaps">
      <title>Reading Bitmap Resources</title>
      <content>
        <para>
          The following example loads all bitmap resources from a file.
          <code language="cs">
            <![CDATA[
string filename = Path.Combine(Environment.SystemDirectory, "msftedit.dll");
using (ResourceInfo ri = new ResourceInfo())
{
    ri.Load(filename);
    foreach(BitmapResource rc in ri[Kernel32.ResourceTypes.RT_BITMAP])
    {
        Console.WriteLine("BitmapResource: {0}, {1}", rc.Name, rc.TypeName);
        Console.WriteLine("DIB: {0}x{1} {2}", rc.Bitmap.Image.Width, rc.Bitmap.Image.Height, 
            rc.Bitmap.Header.PixelFormatString);
    }
}
]]>
          </code>
          Msftedit.dll contains several 4-bit 16 color resources.
          <code language="cmd">
            <![CDATA[
BitmapResource: 125, RT_BITMAP
DIB: 28x14 4-bit 16 Colors
BitmapResource: 126, RT_BITMAP
DIB: 28x14 4-bit 16 Colors
...
]]>
          </code>
        </para>
      </content>
    </section>    
    <section address="bitmaps_readingbitmap">
      <title>Reading Specific Bitmap Resources</title>
      <content>
        <para>
          The following example loads a single bitmap resource directly, without enumerating all resources.
          <code language="cs">
            <![CDATA[
string filename = Path.Combine(Environment.SystemDirectory, "msftedit.dll");
BitmapResource rc = new BitmapResource();
rc.Name = new ResourceId(125);
rc.LoadFrom(filename);
Console.WriteLine("BitmapResource: {0}, {1}", rc.Name, rc.TypeName);
Console.WriteLine("DIB: {0}x{1} {2}", rc.Bitmap.Image.Width, rc.Bitmap.Image.Height, 
  rc.Bitmap.Header.PixelFormatString);
]]>
          </code>
          Msftedit.dll contains a 4-bit 16 color resource under Id 125.
          <code language="cmd">
            <![CDATA[
BitmapResource: 125, RT_BITMAP
DIB: 28x14 4-bit 16 Colors
]]>
          </code>
        </para>
      </content>
    </section>
    <section address="bitmaps_writingbitmaps">
      <title>Writing Bitmap Resources</title>
      <content>
        <para>
          In order to embed an existing bitmap from a .bmp file into an executable (.exe or .dll) we load the .bmp file and
          assign it to a bitmap of a <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.BitmapResource</codeEntityReference>.
          The structure in a .bmp file consits of a <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.Gdi32.BITMAPFILEINFO</codeEntityReference> 
          header followed by the device independent bitmap.
          <code language="cs">
            <![CDATA[
BitmapFile bitmapFile = new BitmapFile("Bitmap1.bmp");
BitmapResource bitmapResource = new BitmapResource();
bitmapResource.Name = new ResourceId("TEST");
bitmapResource.SaveTo("test.dll");
]]>
          </code>
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>
