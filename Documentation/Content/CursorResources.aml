<?xml version="1.0" encoding="utf-8"?>
<topic id="8284c63b-d122-40ec-8593-32bf42b2a9bc" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        This section demonstrates how to use this library for manipulating cursor resources.
      </para>
      <para>
        When <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.ResourceInfo</codeEntityReference>
        encouters a resource of type <literal>12</literal> (<literal>RT_GROUP_CURSOR</literal>),
        it creates an object of type
        <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.CursorDirectoryResource</codeEntityReference>.
        The latter creates a <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.CursorResource</codeEntityReference>,
        which loads an <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.DeviceIndependentBitmap</codeEntityReference>.
        <list class="bullet">
          <listItem>
            A <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.CursorDirectoryResource</codeEntityReference>
            represents a collection of cursor resources.
          </listItem>
          <listItem>
            An <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.CursorResource</codeEntityReference>
            represents a single cursor with multiple images of type 
            <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.DeviceIndependentBitmap</codeEntityReference>.
          </listItem>
          <listItem>
            An <codeEntityReference qualifyHint="false">T:Vestris.ResourceLib.DeviceIndependentBitmap</codeEntityReference> is not a
            resource, but raw data embedded in the file at an offset defined by the cursor resource and represents a single cursor
            bitmap. This data includes the image's XOR bitmap followed by its AND bitmap. These two bitmaps are used together 
            to support transparency.
          </listItem>
        </list>
      </para>
    </introduction>
    <section address="cursors_readingcursors">
      <title>Reading Cursor Resources</title>
      <content>
        <para>
          The following example loads a known cursor resource directly from <localUri>guitils.dll</localUri>,
          without enumerating all resources.
          <code language="cs">
            <![CDATA[
string filename = Path.Combine(Environment.GetEnvironmentVariable("WINDIR"), "gutils.dll");
CursorDirectoryResource rc = new CursorDirectoryResource();
rc.Name = new ResourceId("HORZLINE");
rc.LoadFrom(filename);
Console.WriteLine("CursorDirectoryResource: {0}, {1}", rc.Name, rc.TypeName);
foreach (CursorResource cursor in rc.Icons)
{
  Console.WriteLine(" Cursor {0}: {1} ({2} byte(s)), hotspot @ {3}:{4}",
      cursor.Header.nID, cursor.ToString(), cursor.ImageSize, cursor.HotSpotX, cursor.HotSpotY);
}]]>
          </code>
          GUtils.dll contains two cursor groups, including "HORZLINE". The following output is generated from the example above.
          <code language="cmd">
            <![CDATA[
CursorDirectoryResource: HORZLINE, RT_GROUP_CURSOR
Cursor 2: 32x0 1-bit B/W (308 byte(s)), hotspot @ 16:16
      ]]>
          </code>
        </para>
      </content>
    </section>
    <section address="icons_writingicons">
      <title>Writing Cursor Resources</title>
      <content>
        <para>
          In order to embed an existing cursor from a .cur file into an executable (.exe or .dll) we load the .cur file and convert
          it to a CursorDirectoryResource. The structure in a .cur file is similar to the structure of the cursor in an executable
          with two major differences: the executable stores cursor hotspot information and the header contains the cursor Id,
          while a .cur header simply contains the offset of cursor data.
        </para>
        <para>
          It's important to identify existing cursor resources in the executable and define the cursor Id. For example,
          if there're 2 existing RT_GROUP_CURSOR resources in the target binary, the added resource's Id must be 3.
          <code language="cs">
            <![CDATA[
CursorFile cursorFile = new CursorFile("Cursor1.ico");
CursorDirectoryResource cursorDirectoryResource = new CursorDirectoryResource(cursorFile);
cursorDirectoryResource.Name = new ResourceId("TEST");
cursorDirectoryResource.Language = ResourceUtil.USENGLISHLANGID;
cursorDirectoryResource.Icons[0].Id = 3;
cursorDirectoryResource.Icons[0].HotSpotX = 12;
cursorDirectoryResource.Icons[0].HotSpotY = 12;
cursorDirectoryResource.Icons[0].Language = ResourceUtil.USENGLISHLANGID;
cursorDirectoryResource.SaveTo("test.dll");
]]>
          </code>
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>